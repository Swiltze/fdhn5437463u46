<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat App</title>
  <script src="/socket.io/socket.io.js"></script>
  <style>
    /* Styles here */
    body {
      font-family: Arial, sans-serif;
    }
    #messages {
      list-style-type: none;
      padding: 0;
    }
    #chat-form {
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <form id="logout-form" action="/logout" method="POST">
    <button type="submit">Logout</button>
  </form>
  <ul id="messages"></ul>
  <form id="chat-form" action="">
    <input id="message-input" autocomplete="off" placeholder="Type a message..." /><button>Send</button>
  </form>

  <script>
    document.addEventListener('DOMContentLoaded', (event) => {
      const socket = io();

      // Send message to server
      document.querySelector('#chat-form').addEventListener('submit', (e) => {
        e.preventDefault();
        let messageInput = document.querySelector('#message-input');
        if (messageInput.value) {
          socket.emit('chatMessage', sanitizeInput(messageInput.value));
          messageInput.value = '';
        }
      });

      // Logout event
      document.querySelector('#logout-form').addEventListener('submit', (e) => {
        e.preventDefault();
        fetch('/logout', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
          }
        }).then(response => {
          if (response.ok) {
            window.location.href = '/';
          } else {
            console.error('Logout failed');
          }
        }).catch(error => {
          console.error('Error:', error);
        });
      });

      // Click event on messages
      document.querySelector('#messages').addEventListener('click', (e) => {
        if (e.target.classList.contains('clickable-user')) {
          const userId = e.target.getAttribute('data-user-id');
          showAdminOptions(userId, e.target);
        }
      });

      
      socket.on('userJoined', (message) => {
        let item = document.createElement('li');
        item.textContent = message;
        item.style.fontStyle = 'italic'; // Style the user joined message differently if you want
        document.querySelector('#messages').appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
      });

      // Receive message from server
      socket.on('chatMessage', (data) => {
        document.querySelector('#messages').appendChild(createMessageListItem(data.username, data.message));
        window.scrollTo(0, document.body.scrollHeight);
      });

      // Get chat history
      socket.on('chatHistory', (messages) => {
        const fragment = document.createDocumentFragment();
        messages.forEach((messageObj) => {
          fragment.appendChild(createMessageListItem(messageObj.username, messageObj.message));
        });
        document.querySelector('#messages').appendChild(fragment);
        window.scrollTo(0, document.body.scrollHeight);
      });
    });

    // Function to sanitize user input
    function sanitizeInput(input) {
      const div = document.createElement('div');
      div.textContent = input;
      return div.innerHTML;
    }

    // Function to create message list item
    function createMessageListItem(username, message) {
      let item = document.createElement('li');
      let userSpan = document.createElement('span');
      userSpan.textContent = sanitizeInput(username);
      userSpan.className = 'userbox';
      item.appendChild(userSpan);
      item.appendChild(document.createTextNode(`: ${sanitizeInput(message)}`));
      return item;
    }

    // Function to show admin options
    function showAdminOptions(userId, userElement) {
      const action = prompt('Enter "ban" to ban the user or "delete" to delete the message.');
      if (action === 'ban') {
        banUser(userId);
      } else if (action === 'delete') {
        deleteMessage(userElement.parentNode.getAttribute('data-message-id'));
      }
    }

    // Function to delete a message
    function deleteMessage(messageId) {
      fetch('/delete-message', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: `messageId=${messageId}`
      }).then(response => {
        if (!response.ok) {
          console.error('Unable to delete message');
        }
      }).catch(error => {
        console.error('Error:', error);
      });
    }

    // Function to ban a user
    function banUser(userId) {
      const reason = prompt('Please provide a reason for the ban:');
      if (reason) {
        fetch('/ban-user', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
          },
          body: `userId=${userId}&reason=${encodeURIComponent(reason)}`
        }).then(response => {
          if (!response.ok) {
            console.error('Unable to ban user'); 
          }
        }).catch(error => {
          console.error('Error:', error);
          });
        } 
      }
    
    socket.on('deleteMessage', (messageId) => {
      const messageElement = document.querySelector(`#message=${messageId}`);
      if (messageElement) {
        messageElement.remove();
      }
    })

    socket.on('banUser', (userId) => {
      console.log('User banned');
    })

  </script>
</body>
</html>
